<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Taro3.2 适配 React Native 之样式内幕</title>
      <link href="2021/03/28/taro3-2-gua-pei-react-native-zhi-yang-shi-nei-mu/"/>
      <url>2021/03/28/taro3-2-gua-pei-react-native-zhi-yang-shi-nei-mu/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>从 Taro 3 开始，58同城成为 Taro 的战略合作伙伴，负责 Taro 3 React Native 部分的研发和推广。我们总结以往 JD Taro 同学们适配上的经验，以及内部对 React Native 使用的技术沉淀，为了能更好的提升开发体验，因此我们提出新的架构方案[0]。</p><p>在新的架构设计下，以往对样式处理的方案需要设计接入。在接入的过程中，需要考虑到 React-Native 的样式管理与样式的差异，框架提供对用户友好的兼容方案，以便在工程开发上更好的组织代码。</p><p>React-Native 的样式支持基本上是实现了 CSS 的一个子集，但属性名不完全一致。更大的不同是没有对层叠样式表支持，不能使用 class 读取静态样式，所以在跟 Web 的适配上有很大的困难。</p><h2 id="适配上的问题"><a href="#适配上的问题" class="headerlink" title="适配上的问题"></a>适配上的问题</h2><p>开始接入样式系统之前，先看一段代码</p><p>常见的 React Native 代码设置样式：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">import React from &quot;react&quot;;import &#123; StyleSheet, Text, View &#125; from &quot;react-native&quot;;const App &#x3D; () &#x3D;&gt; (  &lt;View style&#x3D;&#123;styles.container&#125;&gt;    &lt;Text style&#x3D;&#123;styles.title&#125;&gt;React Native&lt;&#x2F;Text&gt;  &lt;&#x2F;View&gt;);const styles &#x3D; StyleSheet.create(&#123;  container: &#123;    flex: 1,    backgroundColor: &quot;#eaeaea&quot;  &#125;,  title: &#123;    fontSize: 30,    fontWeight: &quot;bold&quot;  &#125;&#125;);export default App;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常见的 Taro 其他端代码设置样式：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">&#x2F;&#x2F; app.jsimport React from &quot;react&quot;;import &#123; Text, View &#125; from &quot;@tarojs&#x2F;components&quot;;import &quot;.&#x2F;app.css&quot;;const App &#x3D; () &#x3D;&gt; (  &lt;View className&#x3D;&quot;container&quot;&gt;    &lt;Text className&#x3D;&quot;title&quot;&gt;React Native&lt;&#x2F;Text&gt;  &lt;&#x2F;View&gt;);export default App;&#x2F;&#x2F; app.css.container &#123;  flex: 1;  background-color: &quot;#eaeaea&quot;;&#125;.title &#123;  font-size: 30;  font-weight: &quot;bold&quot;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过分析上面的代码，Taro 要适配 React Native 代码有以下及衍生的问题：</p><ol><li><p>React Native 代码（样式代码） 与其他平台样式管理的差异性</p><ol><li>React Native 样式只支持声明式 style 的写法</li><li>其他端比如小程序端既可以使用声明式 style ，又可以通过 class 读取导入的样式进行布局</li></ol></li><li><p>通用的样式文件怎么转换为对象</p></li><li><p>组件样式怎么传递</p><p> React Native 是用 style 进行传递，其他端使用 class。理论上从写法上约束，使三端更好的适配，CSS In JS 样式解决方案更适合。</p></li><li><p>React Native 支持的样式有限，不支持的样式怎么处理</p></li><li><p>平台型的特殊逻辑以及特殊样式怎么灵活处理</p><p> Taro 在处理跨端文件上有做过处理，但是只是针对脚本文件，我们希望能够对样式文件也能够进行跨端，并且希望在 ios 和 android 两个端的差异文件匹配。比如 Shadow 类样式，只能在 IOS 上生效，Android 则需使用 elevation 替代。当然可以通过重写，但有的时候工程化需求能更明确的区分这两端。</p></li></ol><h2 id="总体设计"><a href="#总体设计" class="headerlink" title="总体设计"></a>总体设计</h2><h4 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h4><p>样式适配设计流程图：</p><img src='https://tva1.sinaimg.cn/large/008eGmZEgy1gn5ncsrc1yj30u011agz4.jpg' style="width:400px;margin:0 auto 20px;display: block" /><p>下面是流程释义，对应流程图标注。</p><p>核心流程：</p><ol><li>样式代码处理成对象<ol><li>CSS 样式解析成对象导出</li><li>引入样式文件处理成 JS 模块</li><li>引入多个样式文件处理</li></ol></li><li>样式校验</li><li>标签属性 className 处理成 style</li></ol><p>拓展补充流程：<br>4. 多种预编译语言的适配<br>5. 更灵活的跨平台工程适配</p><h2 id="设计实现"><a href="#设计实现" class="headerlink" title="设计实现"></a>设计实现</h2><h4 id="样式代码处理成对象"><a href="#样式代码处理成对象" class="headerlink" title="样式代码处理成对象"></a>样式代码处理成对象</h4><ul><li><p>CSS 样式解析成对象导出</p><p>  如果我们需要是样式文件在 React Native 能使用的话，首先需要将样式 CSS 处理成样式对象。在这里第一步将 CSS 解析成 AST 树[1]:</p>  <pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body</span> <span class="token punctuation">&#123;</span>    <span class="token property">background</span><span class="token punctuation">:</span> #eee<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #888<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>  <img src='https://tva1.sinaimg.cn/large/008eGmZEly1gn4k6lt2huj30kw0saq6o.jpg' style="width:200px;margin:0 auto;display: block" /><p>  将解析出来的 AST rules（selector）进行遍历并且再对里面的 declarations（样式属性）遍历，使用 css-to-react-native[2] 将 CSS 属性转换成 React Native 的样式属性，在 selector 命名的对象设置转换后的属性值和属性名。最后用一个大的样式对象存储 selector 命名的对象。</p><p>  将样式处理成 JS 对象[3]：</p>  <img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gn5ng51rooj316m0a0q42.jpg" alt="image-20210106105551032" style="width:500px;margin:0 auto;display: block" /><p>  这一步在源码实现上将 css-to-react-native 和 CSS parser 封装成 taro-css-to-react-native NPM 包。</p><p>  最后将转换后的样式对象导出：</p>  <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> StyleSheet <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react-native'</span><span class="token keyword">const</span> cssObject <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token comment">/**/</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> StyleSheet<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>cssObject<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>引入样式文件处理成 JS 模块</p><p>  Metro 是 Facebook 用来支持 React Native 的打包工具，它 打包有三个阶段，Resolution（模块解析器），Transformation（模块转换），Serialization（模块序列化），直译过来比较容易理解，大概能猜到要用它们做什么事。接下我们需将样式文件进行模块化解析和模块转换，对应的 Metro 配置里面的 resolver 和 transformer 配置项。</p><p>  resolver 配置处理模块解析，<code>sourceExts</code> 用来配置需要处理文件后缀，通过 js 引入进来的模块将会当作 JS 模块处理，这个机制让我们可以将样式文件依赖引入。</p><p>  接下来把导入进来样式文件，在 transformer 这层将样式内容转成 JS 语法，导出 JS 模块，这样就可以在文件中引入样式对象了。</p>  <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// metro.config.js</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> getDefaultConfig <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"metro-config"</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>    resolver<span class="token operator">:</span> <span class="token punctuation">&#123;</span> sourceExts <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getDefaultConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    resolver<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      sourceExts<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span>sourceExts<span class="token punctuation">,</span> <span class="token string">"scss"</span><span class="token punctuation">,</span> <span class="token string">"sass"</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    transformer<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 样式 transformer， 配置忽略了对其他文件的处理，实际上根据不同后缀使用不同的 transformer</span>      babelTransformerPath<span class="token operator">:</span> require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"@tarojs/rn-style-transformer"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  将原来的样式代码字符串转成 JS 的代码字符串：</p>  <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> StyleSheet <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react-native'</span><span class="token keyword">export</span> <span class="token keyword">default</span> StyleSheet<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>cssObject<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>  然后可以从页面上引入样式模块：</p>  <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> a <span class="token keyword">from</span> <span class="token string">'a.css'</span><span class="token keyword">const</span> _stylesheet <span class="token operator">=</span> a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>引入多个样式文件处理</p><p>  引入一个样式文件时，我们不需要处理，只需将导出的对象赋值 <code>_stylesheet</code> 对象，然后在 <code>style</code> 属性进行引用。当引入多个样式文件时，要实现整个页面引入使用的样式生效，需要把多个样式合并成一个样式对象：</p>  <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> a <span class="token keyword">from</span> <span class="token string">'a.css'</span><span class="token keyword">import</span> b <span class="token keyword">from</span> <span class="token string">'b.css'</span><span class="token keyword">const</span> _stylesheet <span class="token operator">=</span> <span class="token function">mergeStyles</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>  要实现上面的功能，需要对 JS 代码处理，我们在 Babel 编译的时候定义 visitor 访问 importDeclaration 修改 AST 就可以了。<br>  下面是一段代码演示：</p>  <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">traverse</span><span class="token punctuation">(</span>codeAst<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token comment">// visitor</span>  Program<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token parameter">ast</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> lastImportAst <span class="token operator">=</span> <span class="token function">findLastImport</span><span class="token punctuation">(</span>ast<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'body'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>styleList<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 插入到最后一个 import 后面</span>        lastImportAst<span class="token punctuation">.</span><span class="token function">insertAfter</span><span class="token punctuation">(</span>template<span class="token punctuation">.</span><span class="token function">ast</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">          function mergeStyle() &#123;            // 省略代码，实现 arguments 对象的合并，返回合并的对象          &#125;          const _styleSheet = mergeStyle(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>styleList<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">)        </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 访问 importDeclaration ast</span>  <span class="token function">ImportDeclaration</span><span class="token punctuation">(</span><span class="token parameter">ast</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> source <span class="token punctuation">&#125;</span> <span class="token operator">=</span> path<span class="token punctuation">.</span>node    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isStyle</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span>    ast<span class="token punctuation">.</span>node<span class="token punctuation">.</span>specifiers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">node</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 导出的 default</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">isImportDefaultSpecifier</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        styleList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>local<span class="token punctuation">.</span>name<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="标签属性-className-处理成-style"><a href="#标签属性-className-处理成-style" class="headerlink" title="标签属性 className 处理成 style"></a>标签属性 className 处理成 style</h4><p>上面讲到的文件导入处理，以及多文件合并都是用 Babel 插件去实现的，将 className 处理成 style 也是通过 AST 修改 jsxElement 的属性。下面是插件实现属性转换的核心逻辑：</p><ul><li><p>className 是一个普通字符串</p><p>  这一步比较好办，直接把 <code>&lt;View className=&#39;red&#39; /&gt;</code> 转化成 <code>&lt;View style=&#123;_styleSheet[&#39;red&#39;]&#125; /&gt;</code>。</p></li><li><p>className 是一个表达式</p><p>  className 如果是复杂表达式（比如函数调用等非 JS 基本类型）的话，在 Babel 编译时是无法处理这种结果的，所以得借助运行时方法去处理。这里 我们实现了一个 getStyle 函数，参数传入 className 表达式，在运行时得到表达式的值再去 _styleSheet 里面取出样式对象。代码层将 <code>&lt;View className=&#123;&#39;red&#39;&#125; /&gt;</code> 转化成 <code>&lt;View className=&#123;getStyle(&#39;red&#39;)&#125; /&gt;</code>。</p></li><li><p>className 和 style 属性同时存在 </p><p>  同时存在这两种属性时，将两者的值进行合并。React Native 标签 style 属性支持数组对象，所以可以把 <code>&lt;View className=&#39;red&#39; style=&#123;&#123; width: 100 &#125;&#125; /&gt; </code> 处理成 <code>&lt;View style=[&#123;color: &#39;red&#39;&#125;, &#123; width: 100 &#125;] /&gt;</code> 。 </p><p>  实现下面核心逻辑的代码演示：</p>  <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">JSXOpeningElement</span><span class="token punctuation">(</span><span class="token parameter">jsxPath</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> attributes <span class="token punctuation">&#125;</span> <span class="token operator">=</span> jsxPath<span class="token punctuation">.</span>node  <span class="token keyword">const</span> styleNode <span class="token operator">=</span> attributes<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">node</span> <span class="token operator">=></span> node<span class="token punctuation">.</span>name<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">'style'</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> classNode <span class="token operator">=</span> attributes<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">node</span> <span class="token operator">=></span> node<span class="token punctuation">.</span>name<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">'className'</span><span class="token punctuation">)</span>  <span class="token comment">// 存在 className 属性</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>classNode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 删除 className 属性</span>    attributes<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>attributes<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>classNode<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> class2StyleExpression <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment">// className 表达式</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">isJSXExpressionContainer</span><span class="token punctuation">(</span>classNode<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> value <span class="token punctuation">&#125;</span> <span class="token operator">=</span> classNode<span class="token punctuation">.</span>value<span class="token punctuation">.</span>expression      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> value<span class="token punctuation">.</span>expression<span class="token punctuation">.</span>value <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// className=&#123;'red black'&#125; => style=&#123;[_stylesheet['red'], _stylesheet['black']]&#125;</span>        class2StyleExpression <span class="token operator">=</span> value<span class="token punctuation">.</span>expression<span class="token punctuation">.</span>value <span class="token operator">===</span> <span class="token string">''</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token function">getMap</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span>expression<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token comment">// getMap() 返回数组表达式，自行实现</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">// 标记需要在运行时动态计算 className 值</span>      <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// className=&#123;expression&#125; => style=&#123;getStyle(expression)&#125;</span>        class2StyleExpression <span class="token operator">=</span> <span class="token punctuation">[</span>t<span class="token punctuation">.</span><span class="token function">callExpression</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">identifier</span><span class="token punctuation">(</span><span class="token string">'getStyle'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>value<span class="token punctuation">.</span>value<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token comment">// TODO: 标记最后一个 import 后面插入 getStyle 函数，在 Program exit 时处理</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// className 是字符串</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">isStringLiteral</span><span class="token punctuation">(</span>classNode<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      class2StyleExpression <span class="token operator">=</span> classNode<span class="token punctuation">.</span>value <span class="token operator">===</span> <span class="token string">''</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token function">getMap</span><span class="token punctuation">(</span>classNode<span class="token punctuation">.</span>value<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token comment">// getMap() 返回数组表达式</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 存在 style</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>styleNode <span class="token operator">&amp;&amp;</span> t<span class="token punctuation">.</span><span class="token function">isJSXExpressionContainer</span><span class="token punctuation">(</span>styleNode<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> expression <span class="token punctuation">&#125;</span> <span class="token operator">=</span> styleNode<span class="token punctuation">.</span>value      <span class="token comment">// style=&#123;[&#123; &#125;]&#125; 表达式</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>expression<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">'ArrayExpression'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        expression<span class="token punctuation">.</span>elements <span class="token operator">=</span> class2StyleExpression<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>expression<span class="token punctuation">.</span>elements<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">// style=&#123;&#123; &#125;&#125; 表达式</span>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>expression<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">'ObjectExpression'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        styleNode<span class="token punctuation">.</span>value <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">jSXExpressionContainer</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">arrayExpression</span><span class="token punctuation">(</span>class2StyleExpression<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>expression<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 不存在则新增 style 属性</span>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      attributes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">jSXAttribute</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">jSXIdentifier</span><span class="token punctuation">(</span><span class="token string">'style'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span><span class="token function">jSXExpressionContainer</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">arrayExpression</span><span class="token punctuation">(</span>class2StyleExpression<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  还有其他场景感兴趣的同学请查看 babel-plugin-transform-react-jsx-to-rn-stylesheet 测试用例[4]。</p><p>  即使实现这种方式的转换，但仍然可能跟 Web 的样式呈现不一样：</p>  <pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* app.css */</span><span class="token selector">.black</span> <span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.red</span> <span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>  <pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">&lt;View className&#x3D;&#39;red black&#39; &#x2F;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  在 Web 端：</p>  <pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">&lt;div class&#x3D;&#39;red black&#39; &#x2F;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  而 React Native 端处理成了：</p>  <pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">&lt;View style&#x3D;&#123;[stylesheet.red, stylesheet.black]&#125; &#x2F;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  细心的同学可能发现问题了，在 Web 端的，class 跟样式文件的定义样式的顺序有关，跟标签的 class 属性书写顺序无关，而在 React Native，却跟 class（处理成 style）的顺序有关。这个问题，现阶段只能在代码层去规避，还没有想到很好的方法去解决。</p></li></ul><p>以上讲的是如何将一般的 CSS 语法的文件处理成 React Native 标签的 style 属性能接收到的样式对象，而在实际开发生产时，样式预处理器更为推荐使用，毕竟优秀的语法糖能提高劳动人民的生产力。</p><h4 id="多种预编译语言的适配"><a href="#多种预编译语言的适配" class="headerlink" title="多种预编译语言的适配"></a>多种预编译语言的适配</h4><ul><li><p>Sass</p><p>  这个版本的做法是基于 node-sass 解析 Sass 语法，内部调用 node-sass 提供的 API render 函数，并且提供一些 options 配置。跟 sass-loader[5] 类似，但只暴露了 options 和 additionalData 两个配置项。</p><p>  additionalData是一个全局配置，插入一段代码到引入的 Sass 文件中。而 config.sass 也是一个全局配置，他们之间是有关联的。addtionalData 在编译时注入的每个 Sass 文件头部，在 config.sass 配置的全局样式之前，就是说 config.sass 可以把 addtionalData 样式重写掉，或者可以复用 addtionalData 的变量。</p><p>  sass-loader 配置里面的有一个 implementation 配置，该配置能选择使用 dart-sass 实现 Sass 的解析，但是目前这个版本还没有支持到，所以目前还不能启用 dart-sass 解析。node-sass[6] 依赖 node-gyp 和 python2，官方不建议使用，不会有新特性的更新，取而代之的是使用 dart-sass[7]。这个库完全兼容 node-sass，官方介绍的更易安装，更容易集成到现代 Web 开发工作流程中。所以 Taro React Native 后面版本会支持到 implementation 配置。</p></li><li><p>Less，Stylus</p><p>  像 less-loader 一样，Less 处理需要封装 less.js  提供的 api render 函数，以及封装自定义 options 和 addtionalData 处理。</p>  <pre class="line-numbers language-js" data-language="js"><code class="language-js">less<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token operator">...</span>options<span class="token punctuation">,</span>  filename<span class="token punctuation">,</span>  plugins<span class="token operator">:</span> plugins<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>plugins <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  paths<span class="token operator">:</span> paths<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>paths <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> output</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token function">resolve</span><span class="token punctuation">(</span>output<span class="token punctuation">.</span>css<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>   Stylus 支持也跟 Sass Less 类似，提供 options 和 additionalData 两个配置项，将 Stylus 语法解析成标准的 CSS。</p></li><li><p>PostCSS</p><p>  PostCSS 不是类似上述预处理器，而是一种允许用 JS 插件来转变样式的工具。在源码里面我们对内置默认插件进行了封装，最后使用 postcss 库进行解析。</p></li></ul><h4 id="校验样式"><a href="#校验样式" class="headerlink" title="校验样式"></a>校验样式</h4><ul><li><p>校验样式写法</p><p>  在设计的过程中，所有的样式文件都经过预处理语言 PostCSS 处理，这样可以把一些公共事务集中处理，比如 stylelint，条件编译，单位处理等等。样式 stylelint 检测是用来校验样式写法，使用 stylelint 插件，通过 stylelint-config-taro-rn[9] 配置 规则来约束不支持的样式写法，比如校验组合选择器。</p></li><li><p>校验样式对象</p><p>  React Native 支持的样式有限，写入一些不支持的样式将会导致应用报错或者闪退，所以我们需要一个功能去校验代码，在控制台打印样式错误日志。</p><p>  当写了一个不支持的样式属性 <code>o</code> 时：</p>  <img src='https://tva1.sinaimg.cn/large/008eGmZEly1gn4higfqvej30k60vswhp.jpg' style='width:300px;margin: 0 auto;display: block' /><p>  在控制台给用户提示报错信息：</p>  <img src='https://tva1.sinaimg.cn/large/008eGmZEly1gn4hmacxpej318o054gnh.jpg' style='width:600px;margin: 0 auto;display: block' /></li></ul><h4 id="更灵活的跨平台工程适配"><a href="#更灵活的跨平台工程适配" class="headerlink" title="更灵活的跨平台工程适配"></a>更灵活的跨平台工程适配</h4><ul><li><p>跨平台文件</p><p>  在文章开始的是提到过，我们需要更灵活的去匹配不同平台的文件（包括样式文件），并且希望区分 IOS 和 Android 两端的文件。</p><p>  实现上面最先想到的是用 Babel 插件去实现，因为 Babel 去修改 import 声非常简单。但是在实现的一两个版本里面，发现他有很严重的副作用，就是缓存问题。因为 Metro 对所有源文件进行了编译缓存，如果没有改动的话将读缓存的内容而不会默认重新编译，而 Babel 本质上是对代码的转化。当新增一个 跨平台优先级高的文件时，文件没有改动，并且没有打破文件依赖关系，所以不会重新编译的问题。但正是这个缓存机制，Metro 才有快速启动的优势。</p><p>  后面我们决定在 Resolution（模块解析器）在一层 去实现不同跨平台文件引入，将对样式文件和脚本文件都做跨平台处理。</p>  <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">handleFile</span> <span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span> realModuleName<span class="token punctuation">,</span> platform<span class="token punctuation">,</span> moduleName</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 返回新的模块名，根据平台，文件路径和引入的模块</span>    moduleName <span class="token operator">=</span> <span class="token function">resolveExtFile</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> moduleName<span class="token punctuation">,</span> platform<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>跨平台样式</p><p>  在一段样式代码内，希望区分小程序，H5 和 其他平台的场景时， 则需使用条件编译。条件编译是根据编译时的环境变量，对 CSS AST 内容的进行解析，决定对条件内的代码采用或者忽略，使用的是已有 PostCSS 插件 postcss-pxtransform[10] 实现。</p>  <pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/*  #ifndef  %PLATFORM%  */</span><span class="token comment">/* 平台特有样式 */</span><span class="token comment">/*  #endif  */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过使用上面的一些技术手段，在 Taro 开发 React Native 过程中相对而言可以有一个比较好的体验。但在 React Native style 属性作为样式管理限制下，其他端样式的适配上仍有限制。</p><ol><li><p>未来优化的方向和目前仍存在的样式限制 - 选择器的约束</p><ol><li><p>在 JSX 这一层，只对了 className 进行 style 的转换，这个限制造成了在选择器上只能使用类选择器。</p></li><li><p>在 CSS 转成对象这一层，直接将类选择器转化成对象，没有对组合选择器支持，限制了组合选择器的使用。</p></li><li><p>在预处理语言嵌套写法中，也不能使用会编译成组合选择器的写法，但是可以使用能编译成 BEM[11] 的嵌套写法。</p></li></ol></li><li><p>关于组合选择器的一点思考</p><ol><li><p>Atomic CSS</p><p> Atomic CSS[12] 是今年5月 Facebook 提出来的对样式管理的方案，官方号称使用了 Atomic CSS 将主页 CSS 代码量减少了80％，感兴趣的同学可以访问 Facebook 主页查看。</p> <img src='https://tva1.sinaimg.cn/large/008eGmZEly1gn4mor24dcj30tf0dd78w.jpg' width='600' /><p> Atomic CSS 是指给每一个样式属性设置都对应一个类选择器去控制，避免重复的样式代码。比如使用了一个公共样式，只想使用其部分样式，则将增加一个层级（后代选择器）去重写不想使用的样式，在一定程度上增加了代码量。如果项目的样式都用 Atomic CSS ，那么组合选择器的支持就显得没那么必要了。</p></li><li><p>CSS in JS</p><p> CSS in JS[13] 是使用语法糖，在 JS 里面定义样式，本质上是用内联的方式写样式，这跟 React Native 样式管理理念一致，不失为 CSS in JS 爱好者推崇。但在小程序官方有提到， style 接收动态的样式，在运行时会进行解析，会影响渲染速度。</p></li></ol></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[0] <a href="https://github.com/NervJS/taro-rfcs/pull/8">https://github.com/NervJS/taro-rfcs/pull/8</a></p><p>[1] <a href="https://www.npmjs.com/package/css">https://www.npmjs.com/package/css</a></p><p>[2] <a href="https://github.com/styled-components/css-to-react-native">https://github.com/styled-components/css-to-react-native</a></p><p>[3] <a href="https://csstox.surge.sh/">https://csstox.surge.sh/</a></p><p>[4] <a href="https://github.com/NervJS/taro/blob/feat%2Freact-native/packages/babel-plugin-transform-react-jsx-to-rn-stylesheet/__tests__/index.spec.js">https://github.com/NervJS/taro/blob/feat%2Freact-native/packages/babel-plugin-transform-react-jsx-to-rn-stylesheet/<strong>tests</strong>/index.spec.js</a></p><p>[5] <a href="https://github.com/webpack-contrib/sass-loader">https://github.com/webpack-contrib/sass-loader</a></p><p>[6] <a href="https://github.com/sass/node-sass">https://github.com/sass/node-sass</a></p><p>[7] <a href="https://github.com/sass/dart-sass">https://github.com/sass/dart-sass</a></p><p>[8] <a href="https://www.npmjs.com/package/postcss-pxtransform">https://www.npmjs.com/package/postcss-pxtransform</a></p><p>[9] <a href="https://www.npmjs.com/package/stylelint-config-taro-rn">https://www.npmjs.com/package/stylelint-config-taro-rn</a></p><p>[10] <a href="https://www.npmjs.com/package/postcss-pxtransform">https://www.npmjs.com/package/postcss-pxtransform</a></p><p>[11] <a href="http://getbem.com/naming/">http://getbem.com/naming/</a></p><p>[12] <a href="https://engineering.fb.com/2020/05/08/web/facebook-redesign">https://engineering.fb.com/2020/05/08/web/facebook-redesign</a></p><p>[13] <a href="https://en.wikipedia.org/wiki/CSS-in-JS">https://en.wikipedia.org/wiki/CSS-in-JS</a></p>]]></content>
      
      
      <categories>
          
          <category> React Native </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Taro </tag>
            
            <tag> React Native </tag>
            
            <tag> 开源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Babel/plugin 开发日记一</title>
      <link href="2020/10/21/babel-plugin-kai-fa-ri-ji-yi/"/>
      <url>2020/10/21/babel-plugin-kai-fa-ri-ji-yi/</url>
      
        <content type="html"><![CDATA[<h2 id="traverse-开始遍历"><a href="#traverse-开始遍历" class="headerlink" title="traverse 开始遍历"></a>traverse 开始遍历</h2><p> <a href="https://github.com/babel/babel/blob/86f535b8635e780d0707c47ae03658de27ae08bd/packages/babel-core/src/transformation/index.js#L112">https://github.com/babel/babel/blob/86f535b8635e780d0707c47ae03658de27ae08bd/packages/babel-core/src/transformation/index.js#L112</a></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// merge all plugin visitors into a single visitor</span><span class="token keyword">const</span> visitor <span class="token operator">=</span> traverse<span class="token punctuation">.</span>visitors<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>  visitors<span class="token punctuation">,</span>  passes<span class="token punctuation">,</span>  file<span class="token punctuation">.</span>opts<span class="token punctuation">.</span>wrapPluginVisitorMethod<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">traverse</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span>ast<span class="token punctuation">,</span> visitor<span class="token punctuation">,</span> file<span class="token punctuation">.</span>scope<span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="plugin-执行顺序"><a href="#plugin-执行顺序" class="headerlink" title="plugin 执行顺序"></a>plugin 执行顺序</h2><p>按钩子顺序执行，比如 plugin 里面有 Program.enter，则执行完Program.enter在执行下一个的Program.enter，等程序退出在再顺序触发Program.exit，一次按 plugin 顺序执行钩子。traverse visitor 之前会进行 plugins 里的 visitor 合并，钩子对象都具有 enter 和 exit 方法，钩子函数默认为 enter 函数，最后都合并到一个大的 visitor里面，比如 <code>&#123; ImportDeclaration: &#123; enter: [...], exit: [...] &#125; &#125;</code></p><h2 id="一个简单的插件格式"><a href="#一个简单的插件格式" class="headerlink" title="一个简单的插件格式"></a>一个简单的插件格式</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">babelPlug</span><span class="token punctuation">(</span><span class="token parameter">babel</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token string">'babelPlug'</span><span class="token punctuation">,</span>    visitor<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token function">Program</span><span class="token punctuation">(</span><span class="token parameter">path<span class="token punctuation">,</span> state</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="visitor-Program"><a href="#visitor-Program" class="headerlink" title="visitor.Program"></a>visitor.Program</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js">visitor<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// visitor contents</span>  <span class="token comment">// Visitor 中的每个函数接收2个参数：path 和 state</span>  Program<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">enter</span><span class="token punctuation">(</span><span class="token parameter">path<span class="token punctuation">,</span> state</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token parameter">path<span class="token punctuation">,</span> state</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">Program</span><span class="token punctuation">(</span><span class="token parameter">path<span class="token punctuation">,</span> state</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 等同于 enter 进入这个钩子</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="path-get-‘body’"><a href="#path-get-‘body’" class="headerlink" title="path.get(‘body’)"></a>path.get(‘body’)</h2><p>获取 Program 的 node.body 里面的 Nodes</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> stmt <span class="token keyword">of</span> astPath<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'body'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">isImportDeclaration</span><span class="token punctuation">(</span>stmt<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// program import 语法</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="state-amp-amp-state-file-的-Map-管理"><a href="#state-amp-amp-state-file-的-Map-管理" class="headerlink" title="state &amp;&amp; state.file 的 Map 管理"></a>state &amp;&amp; state.file 的 Map 管理</h2><p>Program 状态管理，state Program 共享，整个 plugin 链式调用的状态共享，所以要注意状态冲突。</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gjvo3a3fqkj30ad03odgh.jpg"></p><p>File –&gt; <a href="https://github.com/babel/babel/blob/86f535b8635e780d0707c47ae03658de27ae08bd/packages/babel-core/src/transformation/file/file.js#L34">https://github.com/babel/babel/blob/86f535b8635e780d0707c47ae03658de27ae08bd/packages/babel-core/src/transformation/file/file.js#L34</a></p>]]></content>
      
      
      <categories>
          
          <category> Babel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Babel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Taro@3.x 微信小程序不完全升级指南</title>
      <link href="2020/09/13/taro-3-x-wei-xin-xiao-cheng-xu-bu-wan-quan-sheng-ji-zhi-nan/"/>
      <url>2020/09/13/taro-3-x-wei-xin-xiao-cheng-xu-bu-wan-quan-sheng-ji-zhi-nan/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>Taro@3.0</code> 发版以来，基本上保持在一周的时间发版，主要是修复 <code>bug</code>。通过社区可以了解到，<code>Taro@3.x</code> 发版带来了重大变革，其中对 <code>H5</code> 和小程序场景进行重构，提供了新的特性和新的架构。</p><p><code>Taro@3.0</code> 发版之后，社区一直很活跃，不少用户开始使用一键式（命令）升级。</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">$ taro update project [version]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>敲完之后是这样：</p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ghlwweyel1j30di0w0n03.jpg" width="150" /><p>还有这样的：</p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ghlx3dg9dyj30nr02wq3a.jpg" /><p>看到这些我差点笑出声，这是我在 <a href="https://github.com/NervJS/taro/pull/7240">issue</a> 在讨论 <code>3.x</code> 时看到的，这位同学版本应该是敲错了。不得不说逛社区是件很有意思的事情，有的时候看 <code>issue</code> 能发现一些同道中人，你踩的坑别人也在前赴后继[手动尴尬]。</p><p><code>Taro</code> 目前还有很多的 <a href="https://github.com/NervJS/taro/issues">坑</a> ，现在有 600+ 的 <code>issue</code> 数，平摊到各个平台其实不会很多，咋看一下 <a href="https://github.com/NervJS/taro/issues?q=is:issue+is:open+label:V-3">V-3</a> <code>issue</code> 也就几十个。也有可能是用户基数的关系，毕竟刚发版不久，幸存者偏差。这里我不是要劝退想要升级的同学，就像官方说的，”没有枪，没有炮，没有轮子自己造“，不要怂，就是*！首先我们先看看 <code>Taro@3.x</code> 特性。</p><p><b>以下是在小程序场景下升级 <code>Taro@3.x</code> ，其他端升级仅供参考和学习。</b></p><h2 id="x54-97-114-111-x40-51-46-120-特性"><a href="#x54-97-114-111-x40-51-46-120-特性" class="headerlink" title="&#x54;&#97;&#114;&#111;&#x40;&#51;&#46;&#120; 特性"></a><a href="mailto:&#x54;&#97;&#114;&#111;&#x40;&#51;&#46;&#120;">&#x54;&#97;&#114;&#111;&#x40;&#51;&#46;&#120;</a> 特性</h2><ul><li>开放式框架</li><li>渲染 HTML 字符串</li><li>充满争议的 CSS-In-JS</li><li>虚拟列表 VirtualList </li><li>预渲染 Prerender</li><li>source-map 支持</li><li>更快的构建速度</li><li>更快的运行速度</li><li>Babel@7</li><li>…</li></ul><p>看到它那么多特性，似乎很诱人，详细参考 <a href="https://taro-docs.jd.com/">官方文档</a>，文档有的东西在这里就不过多的赘述了。</p><p>下面是如何用上它呢？如果是新项目那很好办，只需要实现新功能，对于旧项目呢？”买不了吃亏，买不了上当“，以其忍受旧的技术栈，不如升级玩出新花样。</p><h4 id="84-97-x72-111-x40-x33-46-x78-是个啥"><a href="#84-97-x72-111-x40-x33-46-x78-是个啥" class="headerlink" title="&#84;&#97;&#x72;&#111;&#x40;&#x33;&#46;&#x78; 是个啥"></a><a href="mailto:&#84;&#97;&#x72;&#111;&#x40;&#x33;&#46;&#x78;">&#84;&#97;&#x72;&#111;&#x40;&#x33;&#46;&#x78;</a> 是个啥</h4><p>首先先简单了解下框架原理和解决的问题。</p><h5 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h5><p>下面是引用官方的一张架构图：</p><img width="800" src="https://storage.jd.com/taro-source/taro-docs/WechatIMG1393.png" /><h5 id="解决了什么问题"><a href="#解决了什么问题" class="headerlink" title="解决了什么问题"></a>解决了什么问题</h5><ul><li>提供了上面新的特性，比如解决开发体验上的问题；</li><li>得益于新的编译运行机制，我们不用去遵守以前的最佳实践（约束）了。<a href="https://nervjs.github.io/taro/docs/best-practice/">官方最佳实践</a>；<ul><li>JSX 变量在模板语法使用 <code>this.state.x</code>，编译的时候生成未赋值的 <code>data</code> 值，需要定义一个变量赋值 <code>this.state.x</code> ；</li><li>不必遵守 <code>render*</code> 渲染 <code>JSX</code> 的约定；</li><li>不必遵守 <code>on*</code> 渲染传递函数名的约定；</li><li>…</li></ul></li></ul><p>从架构层面上讲，Taro 从一个编译型框架变成了一个运行时框架，基本上曾经的 <code>Taro</code> 无法运行的代码在 <code>Taro Next</code> 中完全没有压力。<code>Taro@3.x</code> 在运行时维护了一个 <code>DOM</code> 模型，使得编译的时候不去做 <code>data xml</code> 转化，从而规避掉了编译带来的 <code>bug</code>，同时降低学习成本，<code>PC</code> 端开发的同学也能轻松接入。</p><p>看起来挺香的。了解了一些知识后，下面我们先从依赖开始升级。</p><h2 id="84-x61-114-x6f-x40-51-x2e-120-依赖"><a href="#84-x61-114-x6f-x40-51-x2e-120-依赖" class="headerlink" title="&#84;&#x61;&#114;&#x6f;&#x40;&#51;&#x2e;&#120; 依赖"></a><a href="mailto:&#84;&#x61;&#114;&#x6f;&#x40;&#51;&#x2e;&#120;">&#84;&#x61;&#114;&#x6f;&#x40;&#51;&#x2e;&#120;</a> 依赖</h2><p>以下是基于 <code>Taro@2.2.5</code> 升级到基于 <code>React@16.10.0</code> 框架 <code>Taro@lastest(@3.0.7)</code> 的历程。</p><h4 id="框架选型"><a href="#框架选型" class="headerlink" title="框架选型"></a>框架选型</h4><p>对用户来说，开放式框架给了用户更多地选择，原来的版本只支持的类 <code>React</code> 语法，现在完全可以使用社区的其他框架，比如 <code>Vue 2</code>、<code>Vue 3</code>、<code>jQuery</code>。在这里因为我是一个 <code>React</code> 的重度用户，比起官方的 <code>Nerv</code>，倾向于 <code>React</code>。而且 <code>React</code> 是一个非常优秀的开源项目，有庞大的团队在维护。这里安利一下 <a href="https://github.com/facebook/react">React</a>，<a href="https://reactjs.org/blog/2020/08/10/react-v17-rc.html">React@17.0</a> 发布了，只是一个过渡版本，消除了设计上的隐患，帮助用户更安全的升级过渡，新的功能特性放在 <code>React@18</code> 发布，有没有一种服务到家的感觉（这里有点要黑 <code>Taro@3.x break change</code> 式升级的嫌疑）。</p><p>跑题了，下面继续介绍 <code>Taro</code>升级，下面是选择 <code>React</code> 框架需要改造的地方：</p><ul><li>安装 <code>React</code> 技术栈所使用的 <code>npm</code> 包；</li><li>框架  <code>API</code>从 <code>Taro</code> 移到第三方框架，比如：<code>import React, &#123; Component &#125; from &#39;react&#39;</code>；</li><li>配置 <code>config.framework: &#39;react&#39;</code>；</li><li><code>babel.config.js</code> 配置 <code>React</code> 相关 <code>babel</code>，这里可以使用官方的 <code>babel-preset-taro</code>，下面【配置更改】会讲到；</li></ul><h4 id="Babel-7"><a href="#Babel-7" class="headerlink" title="Babel@7"></a>Babel@7</h4><p>在 <code>Taro@2.x</code> 使用的 <code>babel@6</code>，了解 <code>babel</code> 同学应该知道 6.x 版本和 7.x 版本的差异，比如 <code>Presets</code> ，新的 <code>Proposals</code> 等命名，<code>babel@7</code> 使用 <code>@babel/x</code> <code> scope</code> 代替 <code>babel/x</code>，防止被占用。</p><h4 id="相关依赖包升级"><a href="#相关依赖包升级" class="headerlink" title="相关依赖包升级"></a>相关依赖包升级</h4><ul><li>使用 <code>npm</code> 挨个安装升级的需要 <code>babel</code> 包了；</li><li>安装官方 <code>babel-preset-taro</code>；</li><li>使用 <code>cli</code>。将 <code>taro-cli</code> 升级到3.x，执行 <code>taro update project[version]</code> 命令。建议使用 <code>cli</code> 升级命令最好是已经升级到 3.x 版本，对于2到3的升级，建议手动升级各个依赖包，因为只能<code>cli</code> 检测 <code>dependencies</code> <a href="https://github.com/NervJS/taro/blob/c171ddaedb413bac1f93a92f038f3a09a3e01e3b/packages/taro-helper/src/constants.ts#L129">某一些包 </a>进行升级。</li></ul><blockquote><p>这里我使用的是手动升级，先删除对应老版本的 <code>npm</code> 包，再安装新版本</p></blockquote><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">npm i @babel&#x2F;runtime @tarojs&#x2F;components @tarojs&#x2F;runtime @tarojs&#x2F;taro @tarojs&#x2F;react react-dom@16.10.0 react@16.10.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">npm i -D @tarojs&#x2F;cli @types&#x2F;webpack-env @types&#x2F;react @tarojs&#x2F;mini-runner @babel&#x2F;core @tarojs&#x2F;webpack-runner babel-preset-taro eslint-config-taro eslint eslint-plugin-react eslint-plugin-import eslint-plugin-react-hooks stylelint<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>各个端的相关包。比如原生小程序转过来会用 <code>with-weapp</code> 包一层</p></blockquote><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">npm i @tarojs&#x2F;with-weapp &#x2F;&#x2F; withWeapp 接受一个小程序规范的 Page&#x2F;App 构造器参数，转换为对应框架规范的组件实例npm i @tarojs&#x2F;taro-weapp &#x2F;&#x2F; 微信小程序npm i @tarojs&#x2F;taro-alipay &#x2F;&#x2F;解决方案支付宝小程序<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>新增的包。这里使用安装 <code>babel</code> <code>presets</code> 或者插件，因为我偷懒，安装 <code>babel-preset-taro</code>，然后在 <code>babel-config.js</code> 配置上老项目使用的插件和预设，参考文档配置或者 <a href="https://github.com/NervJS/taro/blob/c171ddaedb413bac1f93a92f038f3a09a3e01e3b/packages/babel-preset-taro/index.js#L4">代码 </a>。</p></blockquote><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">npm i @babel&#x2F;runtime @tarojs&#x2F;reactnpm i @tarojs&#x2F;runtime &#x2F;&#x2F; Taro 运行时。在小程序端连接框架（DSL）渲染机制到小程序渲染机制，连接小程序路由和生命周期到框架对应的生命周期。在 H5&#x2F;RN 端连接小程序生命周期规范到框架生命周期npm i -D @babel&#x2F;core babel-preset-taro &#x2F;&#x2F; babel 相关<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>删除 <code>babel@7</code> 以下的包。安装 <code>babel-preset-taro</code> 可配置相关的 <code>babel</code>，如果有些 <code>babel presets plugins</code> 在<code>babel-preset-taro</code> 没有集成的话，请手动安装</p></blockquote><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">npm remove babel-plugin-transform-class-properties babel-plugin-transform-decorators-legacy babel-plugin-transform-jsx-stylesheet babel-plugin-transform-object-rest-spread babel-plugin-transform-runtime babel-preset-env babel-runtime @tarojs&#x2F;plugin-babel<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>删除老的 <code>nerv</code> 框架相关的包</p></blockquote><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">npm remove nervjs nerv-devtools<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="配置更改"><a href="#配置更改" class="headerlink" title="配置更改"></a>配置更改</h4><ul><li><p><code>babel-config.js</code>。在 <code>Taro@3.x</code> 之前是 <code>babel</code> 配置在 <code>config/index</code> 配置文件里面，现在把它放在根目录的 <code>babel</code> 配置文件里面</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  presets<span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token string">'taro'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>      framework<span class="token operator">:</span> <span class="token string">'react'</span><span class="token punctuation">,</span>      ts<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token comment">// 是否启用ts</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">]</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><p><code>.eslintrc</code>。在 <code>Taro@3.x</code> <code>eslint-plugin-taro</code> 废弃，因为之前的配置以及编码最佳实践将不适用。如果开启了 <code>ts</code> 编译，还需要安装<code>@typescript-eslint/parser</code> 和 <code>@typescript-eslint/eslint-plugin</code>。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">&#123;</span>  <span class="token string">"extends"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"taro/react"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="x54-x61-114-x6f-64-x33-x2e-120-业务代码改造"><a href="#x54-x61-114-x6f-64-x33-x2e-120-业务代码改造" class="headerlink" title="&#x54;&#x61;&#114;&#x6f;&#64;&#x33;&#x2e;&#120; 业务代码改造"></a><a href="mailto:&#x54;&#x61;&#114;&#x6f;&#64;&#x33;&#x2e;&#120;">&#x54;&#x61;&#114;&#x6f;&#64;&#x33;&#x2e;&#120;</a> 业务代码改造</h2><h4 id="页面-config-独立文件"><a href="#页面-config-独立文件" class="headerlink" title="页面 config 独立文件"></a>页面 config 独立文件</h4><p>在 <code>Taro</code> 1.x，2.x 时，配置是在页面实例里面去配置 <code>config</code>，编译后输出 <code>x.json</code> 配置文件。在 <code>Taro@3.x</code> 里，需要在同级目录里新增一个独立的 <code>JS</code> 文件去配置：<code>x.config.js</code>。</p><p>在这里需要注意的一点是，跟页面代码一起的 <code>config</code> 会通过 <code>webpack</code> 编译，而独立成 <code>x.config.js</code> 只会被 <code>babel-register</code> 进行编译，在项目里刚好 <code>config</code> 配置的 <code>pages</code> 常量是根据不同的场景定义的 <code>webpack</code> 常量，所以 <code>config.js</code> 取不到 <code>webpack</code> 常量配置报错。解决方案是，使用 <a href="https://www.npmjs.com/package/babel-plugin-transform-define">babel-plugin-transform-define</a>，主要不能与 <code>webpack</code> 常量冲突，需要额外定义 <code>config.js</code> 里面的常量。这种解决方式毕竟不优雅，官方考虑在后续添加这个特性，<a href="https://github.com/NervJS/taro/issues/7011">相关issue</a>。</p><h4 id="config-index-配置文件"><a href="#config-index-配置文件" class="headerlink" title="config/index 配置文件"></a>config/index 配置文件</h4><ul><li><code>Config.framework</code> 配置当前小程序使用的框架 <code>React | Vue | Nerv</code>；</li><li><code>Config.defineContants</code>。<code>Taro@2.x</code> 常量的 <code>value</code> 可以使用 <code>key: &#39;我是字符串&#39;</code> 。在<a href="mailto:&#84;&#97;&#x72;&#111;&#x40;&#51;&#x2e;&#x78;">&#84;&#97;&#x72;&#111;&#x40;&#51;&#x2e;&#x78;</a> 编译会报错，要用 <code>String</code> 再包一层，比如 <code>key: JSON.stringify(&#39;我是字符串&#39;)</code>，这里建议定义的常量值都使用 <code>JSON.stringify</code> 处理一下。</li><li><code>Config.terser </code>压缩配置项，terser 配置只在生产模式下生效。如果你正在使用 <code>watch</code> 模式，又希望启用 <code>terser</code>，那么则需要设置，<code>process.env.NODE_ENV</code> 为 <code>production</code>，将不会生成 <code>source-map</code> 文件。</li></ul><h4 id="页面实例的改动"><a href="#页面实例的改动" class="headerlink" title="页面实例的改动"></a>页面实例的改动</h4><ul><li><p><code>Taro.Component</code> 替换为 <code>React.Component</code>；</p></li><li><p>路由信息 <code>this.$router is undefined</code>；</p><blockquote><p><code>this.$router</code> 用 <code>Taro.getCurrentInstance().router</code>（或者 <code>Taro.Current.router</code>）代替。在项目入口文件 <code>app.js</code> 实例里面 <code>componentWillMount</code>, <code>componentDidMount</code> 取到 <code>Taro.Current.router is null</code>，路由信息只有在<code>componentDidShow</code>生命周期才能读取到，因为 <code>componentWillMount</code>, <code>componentDidMount</code> 生命周期 <code>App.onLaunc</code>h 方法里面触发，生命周期触发之后赋值 <code>Current.router</code>，<a href="https://github.com/NervJS/taro/blob/794c29055d393b6f33abb1e4054b023902c6f49c/packages/taro-runtime/src/dsl/react.ts#L222">代码实现</a>。</p></blockquote></li><li><p><code>Taro.getApp() is undefined</code>；</p><blockquote><p>在 实例化（<code>createReactApp</code>）之前调用 <code>Taro.getApp()</code> 将返回 <code>undefined</code>。我们的业务代码比如在 <code>app.js</code> 最顶层 <code>require(./common.js)</code>，如果 <code>common.js</code> 包含 <code>Taro.getApp() [x]</code> 使用将会报错。</p></blockquote></li><li><p>页面实例方法的改变，比如<code>onShareMessage</code> 改成<code> static onShareMessage</code>；</p><blockquote><p>参考<a href="">代码实现</a>。</p></blockquote></li><li><p><code>e.currentTarget.dataset</code> 空对象;</p><blockquote><p><code>e.currentTarget.dataset</code> 不兼容。解决方案：使用 <code>func.bind(this, ...args)</code> 绑定参数的形式，参考 <a href="https://github.com/NervJS/taro/issues/7313">issue</a>。这个解决方案改动也很多，绑定了 <code>dataset</code> 都要进行改造。我还是支持 <code>dataset</code> 的实现，这样框架更接近原生。</p></blockquote></li><li><p><code>withWeapp</code> 问题；</p><blockquote><p>官方并没有在发布 3.0 的时候对 <code>withWeapp</code> 改造，导致 <code>withWeapp</code> 几个报错，<code>this.$router</code>，<code>this.state</code> 取值都是 <code>undefined</code>；解决方案：1、不用这个<a href="https://taro-docs.jd.com/taro/docs/taroize/#%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91">装饰器</a>。但是通常我们有不得以的苦衷，比如业务代码里面大量使用，更改代码的成本太高。2、官方<a href="https://github.com/NervJS/taro/pull/7240">PR</a>，预计在 <code>Taro@3.0.8 </code>发布，并不会等太久；</p></blockquote></li><li><p>没有了 <code>this.$scope</code> 和 <code>this.$componentType</code> 的概念；</p><blockquote><p>只是实现改变了，<code>runtime</code> 维护一个 <code>DOM</code> 内存结构，所以能直接取了。</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// Taro@2.x</span><span class="token keyword">const</span> ctx <span class="token operator">=</span> Taro<span class="token punctuation">.</span><span class="token function">createCanvasContext</span><span class="token punctuation">(</span><span class="token string">"image-cropper"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$scope<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> selectQuery <span class="token operator">=</span> Taro<span class="token punctuation">.</span><span class="token function">createSelectorQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">in</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$scope<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Taro@3.x</span><span class="token keyword">const</span> ctx <span class="token operator">=</span> Taro<span class="token punctuation">.</span><span class="token function">createCanvasContext</span><span class="token punctuation">(</span><span class="token string">"image-cropper"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> selectQuery <span class="token operator">=</span> Taro<span class="token punctuation">.</span><span class="token function">createSelectorQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li>…</li></ul><h2 id="84-97-114-111-x40-x33-x2e-120-多场景下框架的兼容"><a href="#84-97-114-111-x40-x33-x2e-120-多场景下框架的兼容" class="headerlink" title="&#84;&#97;&#114;&#111;&#x40;&#x33;&#x2e;&#120; 多场景下框架的兼容"></a><a href="mailto:&#84;&#97;&#114;&#111;&#x40;&#x33;&#x2e;&#120;">&#84;&#97;&#114;&#111;&#x40;&#x33;&#x2e;&#120;</a> 多场景下框架的兼容</h2><p>在 <code>Taro@2.x</code> ，小程序分包我们可以使用宿主小程序的框架，但在升级 <code>Taro@3.x </code>过程中，我们需要分析 2.x 和 3.x 框架版本能不能做到共用。这个章节我们针对主包、分包和插件场景下对小程序的运行、打包和包大小进行分析，演示多场景框架升级的可行性。</p><h4 id="独立运行"><a href="#独立运行" class="headerlink" title="独立运行"></a>独立运行</h4><p>在58小程序体系里面，经常会有同一份源码编译到不同端的场景，以及借助内部工程化管理工具 <code>MPS</code> 更为便捷的管理分包，组件。在分包和插件的场景下，是一份这样的目录结构：</p><p><img width="200" src="https://tva1.sinaimg.cn/large/007S8ZIlgy1ghpj0nbtjfj30go10udiv.jpg" /><img width="200" src="https://tva1.sinaimg.cn/large/007S8ZIlgy1ghpj573w1wj30gc0l0tai.jpg" /></p><h5 id="分包"><a href="#分包" class="headerlink" title="分包"></a>分包</h5><p>在分包场景中，为了减少包大小，分包尽量减少了依赖第三方 <code>vendors</code> 的注入，比如 <code>Taro</code>，共用主包的 <code>vendor</code>，删掉了无效的 <code>app.x</code> 和 <code>project.config.json</code>。在升级 <code>Taro@3.x</code> 的过程中，由于框架机制的改变，而无法做到与低于 3.0 的版本做到框架的共用。因为在3.x，各个 <code>Page</code> 依赖入口文件 <code>app.js</code>  <code>createReactApp(App: React.ComponentClass, react: typeof React, reactdom, config: AppConfig)</code>  创建的 <code>Current</code>（包含 <code>app</code> ,  <code>router</code> ,  <code>page</code> ）和 <code>Reconciler</code> 实例，就是 <code>page</code> 依赖执行 <code>app.js</code> 文件（参考<a href="https://github.com/NervJS/taro/blob/next/packages/taro-runtime/src/dsl/react.ts">代码实现</a>）。但是分包的 <code>app.js</code> 不是作为入口文件执行的，咋办呢？</p><p>我想到的是在各个文件 <code>require(&#39;./**/app.js&#39;)</code>，在加载完整个分包后执行 <code>app.js</code>，实现 <code>App</code> 的实例化。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// app.js</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'app.onLaunch Taro.Current:'</span><span class="token punctuation">,</span> Taro<span class="token punctuation">.</span>Current<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>children<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// home/list.js</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Home</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">&#123;</span>  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'page.onLoad Taro.Current:'</span><span class="token punctuation">,</span> Taro<span class="token punctuation">.</span>Current<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">componentDidShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'page.onShow Taro.Current:'</span><span class="token punctuation">,</span> Taro<span class="token punctuation">.</span>Current<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>View<span class="token operator">></span>hello world<span class="token operator">&lt;</span><span class="token operator">/</span>View<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1ghrcpc6i2gj318w044754.jpg"></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1ghpl6odjprj30tg046my1.jpg"></p><p>可以看到，在入口文件我们取到实例，且在 <code>Page</code> 页面也能取到实例。但是有个问题发现了没，我们是跟主包共用一个 <code>App</code> 实例，这会导致我们改掉 <code>App</code> 实例的内容影响到主包。</p><p>注入 <code>app.js</code> 方案在分包场景是没有问题的，但是怎么解决 <code>App</code> 实例影响问题呢？这个问题等下再回答，我们再来以插件场景进行尝试这个方案。</p><h5 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h5><p>还是跟分包一样的入口文件和 <code>page</code> 页面。我们先看下编译后的 <code>app.js</code> 代码长啥样：</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1ghplq8fs2yj319g050ac2.jpg"></p><p>这就是 <code>Taro@3.x</code> 编译后的入口文件，下面我们引入这个插件：</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1ghplws5w9nj31g606kadp.jpg"></p><p>发现在插件模式下，微信小程序没有提供 <code>App</code> 实例。</p><h5 id="分析分包和插件页面加载方案"><a href="#分析分包和插件页面加载方案" class="headerlink" title="分析分包和插件页面加载方案"></a>分析分包和插件页面加载方案</h5><p>从上面可以看出，<code>require(&#39;./**/app.js&#39;)方案</code> 从运行机制上来看可行，但是存在一些问题：</p><ul><li><p>分包引入 <code>app.js</code> 执行会引入主包 <code>App</code> 实例被改问题；</p></li><li><p>插件模式下，微信小程序没有提供 <code>App</code> 实例报错；</p></li><li><p>怎么给每个 <code>Page</code> 注入 <code>app.js</code>；</p></li></ul><p>怎么解决上面的问题呢？所以我们想到，我们能不能在分包和插件自己实现一个 <code>App</code> 函数，并且提供一个 <code>onLaunch</code> 空方法，让<code>taro-runtime</code> 能够执行<code>createReactApp</code> 呢？下面是我们使用插件 <code>@mps/mps-taro-plugin/dist/MpsRuntimeTaroPlugin</code> 实现了一个 <code>App</code> 函数：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  config<span class="token punctuation">.</span><span class="token function">onLaunch</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>并且通过 <code>webpack.ProvidePlugin</code> 注入到 <code>app.js</code> 中，打包后的文件是这样的：</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1ghpma9wki3j31ew09mjul.jpg"></p><p>我们再来手动引入 <code>app.js</code> 试试，没有报错，程序能正常运行。</p><p>我们不能每个 <code>Page</code> 都手动注入 <code>app.js</code> 吧？接下来如何给每个 <code>Page</code> 引入 <code>app.js</code> 呢？这时候我们可以通过 <code>webpack</code> 插件做这件事情，刚好我们现有 <code>@mps/mps-taro-plugin/dist/MpsBusinessTaroPlugin</code> 已经提供了这个能力，安装 <code>@mps/mps-taro-plugin@3.0.2</code> 版本。下面是提供 <code>App</code> 函数和给每个 <code>Page </code> 注入 <code>app.js</code> 的插件配置：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'@mps/mps-taro-plugin/dist/MpsRuntimeTaroPlugin'</span><span class="token punctuation">,</span>   <span class="token punctuation">[</span><span class="token string">'@mps/mps-taro-plugin/dist/MpsBusinessTaroPlugin'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>      commonChunks<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'app'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>撒花！通过以上的方式解决了多场景下框架版本的兼容性问题。</p><h4 id="打包文件"><a href="#打包文件" class="headerlink" title="打包文件"></a>打包文件</h4><h5 id="入口文件处理"><a href="#入口文件处理" class="headerlink" title="入口文件处理"></a>入口文件处理</h5><p>多场景如何定义入口文件，这是一个问题，我们经常在入口文件主包需要引用一一些 <code>sdk</code> 之外，然而在分包和插件场景并不需要使用到。比如在 <code>Taro2.x</code> 的是按 <code>WEBPACK_CONST</code> 条件将 <code>import</code> 进来模块赋值给已经赋值过的变量，引入 <code>target</code> 模块定义的上下文在没有使用的时候会被 <code>tree-shaking</code> 掉，其实这应该是一个 <code>bug</code>。或者说是现在的 <code>webpack + uglyfy(terser)</code> 目前没有实现的一个特性（<a href="https://github.com/mishoo/UglifyJS/issues/1261">类消除</a>也是后面实现的），理论上编译器只有在静态分析100%确定没问题的情况下才会删，不会去分析程序流，意味着你的分包和插件在不使用的一些代码都会被打包进来。听起来可能不好理解，我们直接看代码，感兴趣的同学可以尝试下，分别放在 <code>Taro@3.x</code> 和 <code>Taro@2.x</code> 编译：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// App.js 入口文件</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> cube <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./util.js'</span><span class="token punctuation">;</span><span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">WEBPACK_CONST</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 场景常量，WEBPACK_CONST = false</span>value <span class="token operator">=</span> <span class="token function">cube</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// utils.js</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'before utils'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">square</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'square'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> x <span class="token operator">*</span> x<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">cube</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'cube'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> x <span class="token operator">*</span> x <span class="token operator">*</span> x<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><code>Taro@3.x</code> 下，不会被删掉；</p><blockquote><p>Development，<code>console.log(&#39;before utils&#39;);</code> 没被删掉，且 <code>unused</code> 模块也没有被删掉。</p></blockquote><img width="400" src="https://tva1.sinaimg.cn/large/007S8ZIlly1ghqbvnwuy3j30p3092gme.jpg" /><blockquote><p>Production，<code>console.log(&#39;before utils&#39;);</code> 没被删掉， <code>unused</code> 模块被删掉。</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ghqbh3qdtnj30be02tglw.jpg"></p></li></ul><ul><li><p><code>Taro@2.x</code> 下</p><blockquote><p>Development，Production，<code>console.log(&#39;before utils&#39;);</code> 被删掉，<code>unused</code> 模块被删掉</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ghqc5m3a07j307302qglj.jpg"></p></li></ul><p>如果入口文件沿用 <code>Taro@2.x</code> 的写法会带来几个问题:</p><ul><li><p><code>import</code>， <code>require</code>，<code>requirePlugin</code> 等引入上下文会执行；</p></li><li><p>影响包体的大小；</p></li><li><p><code>Taro@3.x</code> <code>dev</code> 环境不会 <code>tree-shaking</code>，参考上面的配置说明 【<code>config/index</code> 配置文件】；</p></li></ul><p>解决上面问题很简单，我们用 <code>webpak + require + defineConstants</code> 的方式对各个场景按需引入，比如：<code>if (WEBPACK_CONST) &#123; require(&#39;..&#39;) &#125;</code>，当 <code>WEBPACK_CONST</code> （编译常量）为 <code>false</code> 的时候，<code>Webpack</code>  编译分析不会把条件外的 <code>require</code> 内容引入进来。有了这个结论我们就对入口文件进行了处理：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// app.js</span><span class="token keyword">let</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">WEBPACK_CONST</span> <span class="token operator">===</span> <span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  App <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./app.a'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>default<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">WEBPACK_CONST</span> <span class="token operator">===</span> <span class="token string">'b'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  App <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./app.b'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>default<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">WEBPACK_CONST</span> <span class="token operator">===</span> <span class="token string">'c'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  App <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./app.c'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>default<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span><span class="token comment">// app.a.js</span><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> Taro <span class="token keyword">from</span> <span class="token string">"@tarojs/taro"</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'app.onLaunch Taro.Current:'</span><span class="token punctuation">,</span> Taro<span class="token punctuation">.</span>Current<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>children<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>咋一看，上面的文件是解决了，但是不太优雅，如果支持配置指定入口文件是不是更好。可惜的是， <code>Taro@3.x</code> 在小程序场景中的将入口文件写死了 <code>app.x</code>，所以不得不使用这种方式去做到分入口加载。感兴趣的同学可以看看这个 <a href="https://github.com/NervJS/taro/pull/7192">PR</a>，<code>entryFileName</code> 其实已经支持在 <code>H5</code> 和 <code>RN</code> 里面配置。</p><h4 id="包大小"><a href="#包大小" class="headerlink" title="包大小"></a>包大小</h4><p>玩游戏最怕的是”一顿操作猛如虎，一看战绩零杠五“。要是包大小不通过，所有的解决方案都是白忙活。下面是我通过开发者工具统计的包大小信息：</p><table><thead><tr><th></th><th><a href="mailto:&#84;&#97;&#x72;&#x6f;&#x40;&#50;&#46;&#50;&#x2e;&#x35;">&#84;&#97;&#x72;&#x6f;&#x40;&#50;&#46;&#50;&#x2e;&#x35;</a></th><th><a href="mailto:&#x54;&#x61;&#114;&#x6f;&#64;&#x33;&#46;&#x30;&#46;&#55;">&#x54;&#x61;&#114;&#x6f;&#64;&#x33;&#46;&#x30;&#46;&#55;</a></th></tr></thead><tbody><tr><td>主包</td><td>1469.0kb</td><td>1369.0kb</td></tr><tr><td>分包</td><td>1246.1kb</td><td>1235.0kb</td></tr><tr><td>插件</td><td>1493.0kb</td><td>1456.0kb</td></tr></tbody></table><p>根据上面统计的信息，在主包，分包和插件场景下，现有的包大小没有超过原来的包大小。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在这里，我们可以认为升级 <code>Taro@3x</code> 在现有的58体系里面是可行的，改动的范围也是可以接受的。</p><p>我是从发布不久开始接入，可以说从 <code>Taro@3.0.2</code> 一路踩坑过来的，开始的时候因为 <code>api</code> 改动大有点打击信心，但随着了解了一些运行机制之后和简单的开发体验后，越发觉得 <code>Taro@3.x</code> 颠覆式的重构反而能让 <code>Taro</code> 走的更远。有兴趣的同学可以按照上面的步骤进行升级，基本上没啥问题，有啥问题可以给提 <code>issue</code> 提 <code>PR</code>，官方人手不多，一起帮忙加特性（改 <code>bug</code> ）。还是那句话，”没有枪，没有炮，没有轮子自己造“。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1] Taro 3 正式版发布：开放式跨端跨框架解决方案: <a href="https://aotu.io/notes/2020/06/30/taro-3-0-0/index.html">https://aotu.io/notes/2020/06/30/taro-3-0-0/index.html</a></p><p>[2] 从旧版本迁移到 Taro Next: <a href="https://nervjs.github.io/taro/docs/migration">https://nervjs.github.io/taro/docs/migration</a></p><p>[3] Taro Next 发布预览版: <a href="https://juejin.im/post/6844904063675400199">https://juejin.im/post/6844904063675400199</a></p>]]></content>
      
      
      <categories>
          
          <category> 小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工程化 </tag>
            
            <tag> 小程序 </tag>
            
            <tag> Taro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js多维数组处理</title>
      <link href="2017/11/25/js-duo-wei-shu-zu-chu-li/"/>
      <url>2017/11/25/js-duo-wei-shu-zu-chu-li/</url>
      
        <content type="html"><![CDATA[<p>处理数据结构时，数组运用在不同场景，下面罗列多维数组处理成一维数组的方法</p><h3 id="1-运用字符串对数组进行处理"><a href="#1-运用字符串对数组进行处理" class="headerlink" title="1.运用字符串对数组进行处理"></a>1.运用字符串对数组进行处理</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 处理[[1],[2, [3, [4]]]]</span><span class="token keyword">function</span> <span class="token function">flatten</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> symbol <span class="token operator">=</span> <span class="token string">','</span>  <span class="token keyword">const</span> str <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>symbol<span class="token punctuation">)</span>  <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>symbol<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种做法在有很大的局限性，对于处理数字而言，split后数组number变成string，处理string数组收到symbol的影响等</p><h3 id="2-使用数组concat方法"><a href="#2-使用数组concat方法" class="headerlink" title="2.使用数组concat方法"></a>2.使用数组concat方法</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 处理[[1],[2, &#123;&#125;]]</span><span class="token keyword">function</span> <span class="token function">flatten</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">Reflect</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>concat<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span>  <span class="token comment">// return Array.prototype.concat.apply([], arr)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>apply只能处理二维数数组一维数组，但是保持了数据的原始性，推荐使用Reflect代替对象原型方法，使代码更加简洁易懂。</p><h3 id="3-递归函数"><a href="#3-递归函数" class="headerlink" title="3.递归函数"></a>3.递归函数</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 处理[[1],[2, [3, 4, [5, 6]]]]</span><span class="token keyword">var</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">function</span> <span class="token function">flatten</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">l</span> <span class="token operator">=></span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">flatten</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span> <span class="token operator">:</span> newArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> newArr<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>需要预定义额外的变量用于保存递归的数据</p><h3 id="4-reduce-递归"><a href="#4-reduce-递归" class="headerlink" title="4.reduce 递归"></a>4.reduce 递归</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 处理[[1],[2, [3, 4, [5, 6]]]]</span><span class="token keyword">function</span> <span class="token function">flatten</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> a<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">flatten</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token operator">:</span> b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实现自己的虚拟DOM: Props &amp; Events</title>
      <link href="2017/08/09/virtualdom2/"/>
      <url>2017/08/09/virtualdom2/</url>
      
        <content type="html"><![CDATA[<p>很开心可以继续分享这个话题，下一个要讨论的就是事件驱动，将使我们实现的婴儿虚拟dom运用到真实的项目开发。</p><p>今天我们主要讨论的的是setting／diffing属性（props）和事件处理。</p><h3 id="babel处理"><a href="#babel处理" class="headerlink" title="babel处理"></a>babel处理</h3><p>在这之前我么处理一个普通的标签</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过babel处理会转化成props为null，因为没有属性，结果如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span> type<span class="token operator">:</span> <span class="token string">'div'</span><span class="token punctuation">,</span> props<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> children<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们最好将它（props）处理成一个空的对象，因为我们将要对props进行迭代取值</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> props<span class="token punctuation">,</span> <span class="token operator">...</span>children</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> type<span class="token punctuation">,</span> props<span class="token operator">:</span> props <span class="token operator">||</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> children <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>设置简单的属性，比如下面的，会在我们的dom中怎么展现呢？我们将它存在一个对象里。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">list-style</span><span class="token punctuation">:</span> none</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们在内存中将在如下展示</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>    type<span class="token operator">:</span> <span class="token string">'ul'</span><span class="token punctuation">,</span>    props<span class="token operator">:</span> <span class="token punctuation">&#123;</span> className<span class="token operator">:</span> <span class="token string">'list'</span><span class="token punctuation">,</span> style<span class="token operator">:</span> <span class="token string">'list-style: none'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    children<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们取对象的属性值给我们真实的节点设置属性。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">fucntion <span class="token function">setProp</span><span class="token punctuation">(</span><span class="token parameter">$target<span class="token punctuation">,</span> name<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    $target<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>我们知道了设置一个属性，设置所有属性只不过是遍历一下props对象。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">setprops</span><span class="token punctuation">(</span><span class="token parameter">$target<span class="token punctuation">,</span> props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token function">setProp</span><span class="token punctuation">(</span>$target<span class="token punctuation">,</span> name<span class="token punctuation">,</span> props<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在还记得createElement()函数吗？我们仅仅在创建珍视的dom的时候给节点设置属性。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> node <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">const</span> $el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>type<span class="token punctuation">)</span>    <span class="token function">setProps</span><span class="token punctuation">(</span>$el<span class="token punctuation">,</span> node<span class="token punctuation">.</span>props<span class="token punctuation">)</span>    node<span class="token punctuation">.</span>children        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>createElement<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>$el<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>$el<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> $el<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是这没有结束，我们遗漏了一些细节，首先class在javascript是个关键字，所有我们不能用class，我们用className代替。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>navbar light<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>但是我们在真实的dom里面没有className属性这个值，所有我们要通过setProps（）函数处理。还有就是属性值设置成布尔值代表属性存在与否。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>&#123;true&#125;</span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在上面我不希望上面的属性值运用在真实的dom中，</p>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实现自己的虚拟DOM</title>
      <link href="2017/07/15/virtualdom/"/>
      <url>2017/07/15/virtualdom/</url>
      
        <content type="html"><![CDATA[<p>你需要知道两件事如果你创建自己的虚拟DOM，你甚至不需要深入React的源码或者深入其他的虚拟DOM实现的源码。他们太大也太复杂，但是我们可以根据核心代码实现一个简要的虚拟DOM仅仅50行的代码。</p><h3 id="以下是两个概念"><a href="#以下是两个概念" class="headerlink" title="以下是两个概念"></a>以下是两个概念</h3><blockquote><ul><li>虚拟DOM是代替真实DOM的一种呈现</li><li>当我们改变我们的虚拟DOM树时，我们会得到一个新的DOM树。通过比较这两个DOM树（新的和旧的），发现不同的地方，我们仅仅需要将那些不同的地方在真实DOM树呈现，所以定义成虚拟的DOM。</li></ul></blockquote><h3 id="下面就让我们深入这两个概念"><a href="#下面就让我们深入这两个概念" class="headerlink" title="下面就让我们深入这两个概念"></a>下面就让我们深入这两个概念</h3><h2 id="我们的DOM"><a href="#我们的DOM" class="headerlink" title="我们的DOM"></a>我们的DOM</h2><p>首先我们需要我们的DOM树存在缓存里，我们可以用一个普通的js对象才存。比如我们有这么个DOM树：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>item 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>item 2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>是不是看起来非常简单。我们该怎么用js的对象来表达这个DOM树呢？</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span> type<span class="token operator">:</span> <span class="token string">'ul'</span><span class="token punctuation">,</span> props<span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token string">'class'</span><span class="token operator">:</span> <span class="token string">'list'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> children<span class="token operator">:</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span> type<span class="token operator">:</span> <span class="token string">'li'</span><span class="token punctuation">,</span> props<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> children<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'item 1'</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> type<span class="token operator">:</span> <span class="token string">'li'</span><span class="token punctuation">,</span> props<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> children<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'item 2'</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这是可以注意到两件事:</p><blockquote><ul><li>我们用对象来表述我们的DOM</li></ul></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span> type<span class="token operator">:</span> <span class="token string">'…'</span><span class="token punctuation">,</span> props<span class="token operator">:</span> <span class="token punctuation">&#123;</span> … <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> children<span class="token operator">:</span> <span class="token punctuation">[</span> … <span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><ul><li>我们用string来存DOM文本节点</li></ul></blockquote><p>写一颗很大的树在一定的程度上是很难的，所以我们用函数来帮助我们，所以我们能非常简单去理解这种结构</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> props<span class="token punctuation">,</span> …children</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> type<span class="token punctuation">,</span> props<span class="token punctuation">,</span> children <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>现在我们能写出我们的DOM树：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token string">'class'</span><span class="token operator">:</span> <span class="token string">'list'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'item 1'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'item 2'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这样它看起来就非常清爽。但是我们还能做的更好些。在这之前你应该听过JSX。这里需要用到它，那它是怎么工作的呢？</p><p>如果你读了官方的babel <a href="https://babeljs.io/docs/plugins/transform-react-jsx/">JSX</a>文档，babel将把代码编译成：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>item 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>item 2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>顺畅的转成：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> className<span class="token operator">:</span> <span class="token string">'list'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'item 1'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'item 2'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以注意到一些相似点。React.createElement()和我们的h函数调用，这结果就是我们能平滑的使用JSX。我们仅仅需要在文件顶部行加入一行注释：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">/** @jsx h */<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>item 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>item 2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以我们将可以编译下面代码通过babel转义：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">(</span>  <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> className<span class="token operator">:</span> <span class="token string">'list'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'item 1'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'item 2'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当我们使用f函数执行时，他将变成普通的js对象–我们的虚拟DOM:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">(</span>  <span class="token punctuation">&#123;</span> type<span class="token operator">:</span> <span class="token string">'ul'</span><span class="token punctuation">,</span> props<span class="token operator">:</span> <span class="token punctuation">&#123;</span> className<span class="token operator">:</span> <span class="token string">'list'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> children<span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span> type<span class="token operator">:</span> <span class="token string">'li'</span><span class="token punctuation">,</span> props<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> children<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'item 1'</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span> type<span class="token operator">:</span> <span class="token string">'li'</span><span class="token punctuation">,</span> props<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> children<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'item 2'</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span>  <span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>尝试使用jsfiddle来跑下：</p><iframe  style="width: 100%; height: 300px"  src="https://jsfiddle.net/shinken/zadmbrgf/"></iframe><h2 id="运用我的的DOM来展示"><a href="#运用我的的DOM来展示" class="headerlink" title="运用我的的DOM来展示"></a>运用我的的DOM来展示</h2><p>现在我们自己用普通的对象来展示DOM树。这是非常好的事情，但是我们还需要知道怎么通过它来创建真实的DOM。我们可不能就把我们的DOM插入真实的DOM中。</p><p>首先我们足一些假设和约定术语:</p><blockquote><ul><li>我将写些可用真实的DOM节点(element, text nodes)，开头用”$”–$parent 将成为真实的DOM元素</li><li>虚拟DOM的展示将用可用的节点来展示</li><li>像React一样，你有且只有一个根节点–其他的所有节点都包含在这里面</li></ul></blockquote><p>好，就像上面说的那样，让我们写一个createElement()函数将虚拟DOM转化为真实的DOM。从现在开始忘掉’props’和’children’，我们在后面讨论：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> node <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以，因为我们文本和节点–用普通的js对象就是字符串和元素–这种js对象就是像这种：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span> type<span class="token operator">:</span> <span class="token string">'…'</span><span class="token punctuation">,</span> props<span class="token operator">:</span> <span class="token punctuation">&#123;</span> … <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> children<span class="token operator">:</span> <span class="token punctuation">[</span> … <span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果是我们可以通过虚拟的文本节点和DOM节点，它将可以工作。</p><p>现在我们需要考虑的是子节点–每个可能是文本节点或者是元素节点。所以他们同意可以用createElement()函数来创建。你可能想到了，所以我们可以调用createElement()遍历所以的子元素然后将它们appendChild()到我们的元素像这样：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> node <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">const</span> $el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>  node<span class="token punctuation">.</span>children    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>createElement<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>$el<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>$el<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> $el<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样写看起来很好，现在我们在将’props’加上。我们等下再来进行讨论，我们不需要理解虚拟DOM的基本概念，但是它们将添加些更复杂的东西。</p><p>现在我们用jsfiddle试下：</p><iframe  style="width: 100%; height: 300px"  src="https://jsfiddle.net/shinken/zdb00kvg/"></iframe><h2 id="处理变化"><a href="#处理变化" class="headerlink" title="处理变化"></a>处理变化</h2><p>现在我们能把虚拟DOM转化成真实的DOM了，是时候考虑虚拟DOM树的differ算法了。所以基本上我们需要写个算法，他将对边两个虚拟DOM树（新的和旧的），而我们需要将这些改变写入真实的DOM中。</p><p>怎样去比对两颗虚拟DOM树呢？我们需要处理下面那些问题：</p><blockquote><ul><li>有新的节点增加了，所以node增加了，所以我们需要appendChild()</li></ul></blockquote><p><img src="images/1.png"></p><blockquote><ul><li>没有新的节点然而节点被删了所以我们需要removeChild()<br><img src="images/2.png"></li></ul></blockquote><blockquote><ul><li>节点比对结果节点全被不一样，所以我们需要replaceChild()<br><img src="images/3.png"></li></ul></blockquote><blockquote><ul><li>有些节点是一样的，所以我们需要进行深入的比较节点的不一样<br><img src="images/4.png"></li></ul></blockquote><p>好，让我们写一个updateElement()的函数有三个参数$parent, newNode, oldNode, 而$parent是一个真实的DOM，作为我们虚拟DOM的父元素。现在我们来考虑怎么去解决上面描述的问题。</p><h2 id="没有旧节点的情况下"><a href="#没有旧节点的情况下" class="headerlink" title="没有旧节点的情况下"></a>没有旧节点的情况下</h2><p>下面这是非常直接了当，简直是不想解释：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">updateElement</span><span class="token punctuation">(</span><span class="token parameter">$parent<span class="token punctuation">,</span> newNode<span class="token punctuation">,</span> oldNode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>oldNode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    $parent<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>      <span class="token function">createElement</span><span class="token punctuation">(</span>newNode<span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="没有新节点的情况下"><a href="#没有新节点的情况下" class="headerlink" title="没有新节点的情况下"></a>没有新节点的情况下</h2><p>这是有一个问题，假如没有节点在新的，我们需要把它从真实的DOM中移除，但是我们应该怎么做呢？我们知道父元素(通过一个函数)结果我们目的是调用$parent.removeChild()通过真实的DOM元素引用。但是我们没有这些，然而，假如我们知道父节点的位置，我们就可以得到他的引用通过$parent.childNodes[index]，而下标index就是子节点相对父节点的位置。</p><p>我们目的是通过我们的函数找到我们的下标。我们的代码可能会是这个样子：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">updateElement</span><span class="token punctuation">(</span><span class="token parameter">$parent<span class="token punctuation">,</span> newNode<span class="token punctuation">,</span> oldNode<span class="token punctuation">,</span> index <span class="token operator">=</span> <span class="token number">0</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>oldNode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    $parent<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>      <span class="token function">createElement</span><span class="token punctuation">(</span>newNode<span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>newNode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    $parent<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>      $parent<span class="token punctuation">.</span>childNodes<span class="token punctuation">[</span>index<span class="token punctuation">]</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="节点改变了"><a href="#节点改变了" class="headerlink" title="节点改变了"></a>节点改变了</h2><p>首先我们需要去写一个函数去对比这两个新的和旧的节点，如果改变了就通知我们。我们应该考虑它可能是元素或者是文本节点：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">changed</span><span class="token punctuation">(</span><span class="token parameter">node1<span class="token punctuation">,</span> node2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">typeof</span> node1 <span class="token operator">!==</span> <span class="token keyword">typeof</span> node2 <span class="token operator">||</span>         <span class="token keyword">typeof</span> node1 <span class="token operator">===</span> <span class="token string">'string'</span> <span class="token operator">&amp;&amp;</span> node1 <span class="token operator">!==</span> node2 <span class="token operator">||</span>         node1<span class="token punctuation">.</span>type <span class="token operator">!==</span> node2<span class="token punctuation">.</span>type<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在我们有当前节点在父节点的下标我们可以很轻易的替换它通过创建一个新的节点：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">updateElement</span><span class="token punctuation">(</span><span class="token parameter">$parent<span class="token punctuation">,</span> newNode<span class="token punctuation">,</span> oldNode<span class="token punctuation">,</span> index <span class="token operator">=</span> <span class="token number">0</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>oldNode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    $parent<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>      <span class="token function">createElement</span><span class="token punctuation">(</span>newNode<span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>newNode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    $parent<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>      $parent<span class="token punctuation">.</span>childNodes<span class="token punctuation">[</span>index<span class="token punctuation">]</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">changed</span><span class="token punctuation">(</span>newNode<span class="token punctuation">,</span> oldNode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    $parent<span class="token punctuation">.</span><span class="token function">replaceChild</span><span class="token punctuation">(</span>      <span class="token function">createElement</span><span class="token punctuation">(</span>newNode<span class="token punctuation">)</span><span class="token punctuation">,</span>      $parent<span class="token punctuation">.</span>childNodes<span class="token punctuation">[</span>index<span class="token punctuation">]</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="对比子元素"><a href="#对比子元素" class="headerlink" title="对比子元素"></a>对比子元素</h2><p>最后，我们应该通过对比新旧的两个节点去–事实上就是他们调用updateElement()去遍历它们。是的再次递归。</p><p>但是我们有些事情要考虑清楚在我们开始写代码：</p><blockquote><ul><li>我们应该对比子节点仅且当节点是一个元素的时候(文本节点是没有子节点的)</li><li>现在我们通过引用当前的节点作为父节点</li><li>我们应该一个一个的对边所以的子元素–甚至有些情况我们会有’undefined’–没事–我们的函数可以处理</li><li>再就是找下标–它仅仅在是在chilren数字里的子节点的下标</li></ul></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">updateElement</span><span class="token punctuation">(</span><span class="token parameter">$parent<span class="token punctuation">,</span> newNode<span class="token punctuation">,</span> oldNode<span class="token punctuation">,</span> index <span class="token operator">=</span> <span class="token number">0</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>oldNode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    $parent<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>      <span class="token function">createElement</span><span class="token punctuation">(</span>newNode<span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>newNode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    $parent<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>      $parent<span class="token punctuation">.</span>childNodes<span class="token punctuation">[</span>index<span class="token punctuation">]</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">changed</span><span class="token punctuation">(</span>newNode<span class="token punctuation">,</span> oldNode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    $parent<span class="token punctuation">.</span><span class="token function">replaceChild</span><span class="token punctuation">(</span>      <span class="token function">createElement</span><span class="token punctuation">(</span>newNode<span class="token punctuation">)</span><span class="token punctuation">,</span>      $parent<span class="token punctuation">.</span>childNodes<span class="token punctuation">[</span>index<span class="token punctuation">]</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>newNode<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> newLength <span class="token operator">=</span> newNode<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">const</span> oldLength <span class="token operator">=</span> oldNode<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> newLength <span class="token operator">||</span> i <span class="token operator">&lt;</span> oldLength<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">updateElement</span><span class="token punctuation">(</span>        $parent<span class="token punctuation">.</span>childNodes<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span>        newNode<span class="token punctuation">.</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>        oldNode<span class="token punctuation">.</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>        i      <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="将所有的结果放在一块"><a href="#将所有的结果放在一块" class="headerlink" title="将所有的结果放在一块"></a>将所有的结果放在一块</h2><p>是的我们把所有的代码放在jsfiddle里面，真的花了50行代码</p><iframe  style="width: 100%; height: 300px;"  src="https://jsfiddle.net/deathmood/0htedLra"></iframe><p>如果用开发者工具的话可以看到变化当你点击’reload’按钮时</p><p><img src="images/5.gif"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我们已经做到了，我们完整地写了个我们自己的虚拟DOM。而且他能工作。我希望正在读这篇文章的你能理解这些基本的概念–虚拟DOM什么工作的和react在这引擎下是怎么工作的。</p><p>然而有些事情在这里我们没有延伸到（我将在后续的文章对此进行讨论）</p><blockquote><ul><li>设置元素属性和对比和更新他们</li><li>处理事件–增加事件监听我们的元素</li><li>使我们的虚拟DOM在组件里工作，像React</li><li>获取真实DOM的节点引用</li><li>使用虚拟DOM的第三方库和突变真实的DOM–像jQuery和它的插件</li><li>更多…</li></ul></blockquote><p>原文地址：<img src="https://medium.com/@deathmood/how-to-write-your-own-virtual-dom-ee74acc13060" alt="https://medium.com/@deathmood/how-to-write-your-own-virtual-dom-ee74acc13060"></p>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js闭包的一些用法</title>
      <link href="2016/09/22/js-bi-bao-de-yi-xie-yong-fa/"/>
      <url>2016/09/22/js-bi-bao-de-yi-xie-yong-fa/</url>
      
        <content type="html"><![CDATA[<h3 id="1-封装变量"><a href="#1-封装变量" class="headerlink" title="1.封装变量"></a>1.封装变量</h3><blockquote><p>闭包可以帮助把一些不暴露在全局变量封装成“私有变量”。假如有个计算乘机的简单函数：</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">mult</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> arguments<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    a <span class="token operator">=</span> arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>mult函数接受一些number类的参数，并返回这些参数的乘机。对于已经进行过计算的参数乘机，再次额外的计算是一种浪费，我们可以运用到缓存的知识提高函数的性能：</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> cache <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> <span class="token function-variable function">mult</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> argument <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> args <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>argument<span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>cache<span class="token punctuation">[</span>args<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> cache<span class="token punctuation">[</span>args<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> arguments<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    a <span class="token operator">=</span> a <span class="token operator">*</span> arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> cache<span class="token punctuation">[</span>args<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">mult</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>我们又看到cache只在函数内使用，但是又是跟函数暴露在同一个作用域，不如把它封装在函数内部，减少页面的全局变量，以免变量在其他地方修改而引发的错误。</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">mult</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> cache <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> argument <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> args <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>argument<span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>cache<span class="token punctuation">[</span>args<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> cache<span class="token punctuation">[</span>args<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> arguments<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      a <span class="token operator">=</span> a <span class="token operator">*</span> arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> cache<span class="token punctuation">[</span>args<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">mult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//24</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>提炼函数是一种技巧。如果能将大函数代码独立成来，有助于代码的复用，而且对于独立出来的小函数如果有个好的命名，也能起到注释的作用。如果这些小函数不需要在程序的其他地方使用，最好把它用闭包封装起来。</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">mult</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> cache <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> <span class="token function-variable function">calc</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> arguments<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      a <span class="token operator">=</span> a <span class="token operator">*</span> arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> a<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> argument <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> args <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>argument<span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>args <span class="token keyword">in</span> cache<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> cache<span class="token punctuation">[</span>args<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> cache<span class="token punctuation">[</span>args<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">calc</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">mult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//12</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-延续局部变量的寿命"><a href="#2-延续局部变量的寿命" class="headerlink" title="2.延续局部变量的寿命"></a>2.延续局部变量的寿命</h3><blockquote><p>img对象经常用于数据上报，如下所示：</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">report</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">src</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> img <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  img<span class="token punctuation">.</span>src <span class="token operator">=</span> src<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">report</span><span class="token punctuation">(</span><span class="token string">'http://htmljs.b0.upaiyun.com/uploads/1398932756598-angularjs.jpg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>有些浏览器使用report函数进行数据上报会丢失30%左右的数据，也就是说report函数并不是每一次都成功发起http请求。丢失的原因是img是report函数中的局部变量，当report函数调用结束后，img局部变量随即被销毁，而此时或许还没来得及发出http请求，所以此次请求就会丢失掉。我们用闭包将img变量封装起来，就能解决请求丢失的问题：</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">report</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> imgs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">src</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> img <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    imgs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>    img<span class="token punctuation">.</span>src <span class="token operator">=</span> src<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">report</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'http://htmljs.b0.upaiyun.com/uploads/1398932756598-angularjs.jpg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css3 中 animation 和 transition 的用法</title>
      <link href="2016/09/21/css3-zhong-animation-he-transition-de-yong-fa/"/>
      <url>2016/09/21/css3-zhong-animation-he-transition-de-yong-fa/</url>
      
        <content type="html"><![CDATA[<h3 id="1-animation"><a href="#1-animation" class="headerlink" title="1.animation"></a>1.animation</h3><p>用法：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">animation</span><span class="token punctuation">:</span> rotate 10s linear infinite<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或是：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">animation-name</span><span class="token punctuation">:</span> rotate<span class="token punctuation">;</span><span class="token property">animation-duration</span><span class="token punctuation">:</span> 10s<span class="token punctuation">;</span><span class="token property">animation-timing-function</span><span class="token punctuation">:</span> linear<span class="token punctuation">;</span><span class="token property">animation-interation-count</span><span class="token punctuation">:</span> infinite<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>ainmation-name：设置动画名称，而动画名称一般又是@-keyframes设置的，类似于一个函数名。</li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@-webkit-keyframes</span> rotate</span> <span class="token punctuation">&#123;</span>  <span class="token selector">from</span> <span class="token punctuation">&#123;</span> <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>0deg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>  <span class="token selector">50%</span> <span class="token punctuation">&#123;</span> <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>180deg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>  <span class="token selector">to</span> <span class="token punctuation">&#123;</span> <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>360deg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>from(0%)是动画的起始点，to(100%)是动画的终点，而from和to的中间用50%来取中间关键帧的位置。</p></blockquote><ul><li>animation-timing-function：是控制动画时间的属性</li></ul><blockquote><p>属性默认取值ease，取值linear,ease-in,ease-out,ease-in-out,cubic-beziern,n,n),cubic-bezier三次贝塞尔曲线可以自定义动画的时间函数，可以通过<a href="http://cubic-bezier.com/">工具网站</a>定制，还有困惑的steps() 函数。要实现帧动画效果而不是线性的变化就需要引入steps这个值了，换句话就是没有过渡的效果，而是一帧帧的变化</p></blockquote><ul><li><p>animation-duration：表示动画运行一个周期的时间。</p></li><li><p>animation-delay：表示动画的运行前的延迟时间。</p></li><li><p>animation-iteration-count：设置动画运行次数。</p></li></ul><blockquote><p>取值可以是 n|infinite。infinite表示无限循环。</p></blockquote><ul><li>animation-direction: 设置动画的方向</li></ul><blockquote><p>取值normal | reverse | alternate | alternate-reverse</p></blockquote><blockquote><ul><li>reverse 从最终状态往初始状态变化</li><li>alternate 往返变化，开始为初始状态</li><li>alternate-reverse 往返变化，开始为最终状态</li></ul></blockquote><ul><li>animation-fill-mode: 设置动画的方向</li></ul><blockquote><p>取值none | forwards | backwards | both</p><ul><li>forwards 元素的最终状态为动画执行的终点</li><li>backwards 元素的最终状态为元素动画之行前</li><li>both 根据animation-direction轮流应用forwards和backwards规则,根据animation-direction轮流应用forwards和backwards规则</li></ul></blockquote><ul><li>animation-play-state：设置动画的状态。</li></ul><blockquote><p>取值可以是：paused|playing。</p></blockquote><blockquote><p>现代浏览器一般内置了监听animation动画执行的事件，animationstart，animaionend容易理解，而animationiteration是发生在动画每个迭代的结束，跟animation-direction配合比较好理解。</p></blockquote><h3 id="2-transition过渡"><a href="#2-transition过渡" class="headerlink" title="2.transition过渡"></a>2.transition过渡</h3><p>用法：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">transition</span><span class="token punctuation">:</span> property duration timing-function delay<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>写法：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">transition</span><span class="token punctuation">:</span> width 3s ease 1s<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或是：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">transition-property</span><span class="token punctuation">:</span> width<span class="token punctuation">;</span><span class="token property">transition-duration</span><span class="token punctuation">:</span> 3s<span class="token punctuation">;</span><span class="token property">transition-timing-function</span><span class="token punctuation">:</span> ease<span class="token punctuation">;</span><span class="token property">transition-delay</span><span class="token punctuation">:</span> 1s<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>对象属性改变中间的缓冲。过渡有4个属性值。</p></blockquote><ul><li><p>transition-property：设置对象参与过渡的css属性。</p></li><li><p>transition-duration：设置过渡的持续时间。</p></li><li><p>transition-timing-function：设置对象过渡的动画类型。</p></li></ul><blockquote><p>跟animation-timing-function类似。</p></blockquote><ul><li>transition-delay：设置对象延迟的过渡时间。</li></ul>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
